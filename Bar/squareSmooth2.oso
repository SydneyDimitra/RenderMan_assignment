OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
shader squareSmooth2
oparam	float	resultF	0		%read{2147483647,-1} %write{33,33}
global	float	u	%read{1,1} %write{2147483647,-1}
global	float	v	%read{7,7} %write{2147483647,-1}
local	float	repeatCount	%read{1,7} %write{0,0}
local	float	s	%read{14,25} %write{6,6}
local	float	t	%read{14,30} %write{12,12}
local	point	centre	%read{15,15} %write{13,13}
local	point	here	%read{15,15} %write{14,14}
local	float	dist	%read{2147483647,-1} %write{15,15}
local	float	blend	%read{33,33} %write{16,32}
local	float	min1	%read{21,30} %write{17,17}
local	float	max1	%read{24,30} %write{18,18}
local	float	blur	%read{2147483647,-1} %write{19,19}
local	float	fuzz	%read{21,24} %write{20,20}
const	int	$const1	4		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{3,6} %write{1,1}
const	int	$const2	1		%read{18,18} %write{2147483647,-1}
const	float	$const3	1		%read{3,31} %write{2147483647,-1}
const	string	$const4	"mod"		%read{2,8} %write{2147483647,-1}
temp	float	$tmp2	%read{5,5} %write{4,4}
temp	float	$tmp3	%read{4,4} %write{3,3}
temp	float	$tmp4	%read{6,6} %write{5,5}
temp	float	$tmp5	%read{9,12} %write{7,7}
temp	float	$tmp6	%read{11,11} %write{10,10}
temp	float	$tmp7	%read{10,10} %write{9,9}
temp	float	$tmp8	%read{12,12} %write{11,11}
const	point	$const5	0.5 0.5 0		%read{13,13} %write{2147483647,-1}
const	int	$const6	0		%read{17,17} %write{2147483647,-1}
const	float	$const7	0		%read{14,14} %write{2147483647,-1}
const	float	$const8	0.80000001		%read{16,16} %write{2147483647,-1}
const	float	$const9	0.050000001		%read{19,19} %write{2147483647,-1}
const	float	$const10	0.2		%read{20,20} %write{2147483647,-1}
temp	float	$tmp9	%read{23,23} %write{22,22}
temp	float	$tmp10	%read{22,22} %write{21,21}
temp	float	$tmp11	%read{27,27} %write{23,23}
const	float	$const12	10		%read{23,23} %write{2147483647,-1}
temp	float	$tmp12	%read{26,26} %write{25,25}
temp	float	$tmp13	%read{25,25} %write{24,24}
temp	float	$tmp14	%read{27,27} %write{26,26}
temp	float	$tmp15	%read{29,29} %write{27,27}
temp	float	$tmp16	%read{29,29} %write{28,28}
temp	float	$tmp17	%read{32,32} %write{29,29}
temp	float	$tmp18	%read{31,31} %write{30,30}
temp	float	$tmp19	%read{32,32} %write{31,31}
code ___main___
# squareSmooth2.osl:6
#     float repeatCount=4;
	assign		repeatCount $const1 	%filename{"squareSmooth2.osl"} %line{6} %argrw{"wr"}
# squareSmooth2.osl:7
#     float s=mod(repeatCount*u,1);
	mul		$tmp1 repeatCount u 	%line{7} %argrw{"wrr"}
	functioncall	$const4 7 	%argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:135
# vector mod (vector a, vector b) { return a - b*floor(a/b); }
	div		$tmp3 $tmp1 $const3 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp2 $tmp3 	%argrw{"wr"}
	mul		$tmp4 $const3 $tmp2 	%argrw{"wrr"}
	sub		s $tmp1 $tmp4 	%argrw{"wrr"}
# squareSmooth2.osl:8
#     float t=mod(repeatCount*v,1);
	mul		$tmp5 repeatCount v 	%filename{"squareSmooth2.osl"} %line{8} %argrw{"wrr"}
	functioncall	$const4 13 	%argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:135
# point  mod (point  a, point  b) { return a - b*floor(a/b); }
	div		$tmp7 $tmp5 $const3 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $const3 $tmp6 	%argrw{"wrr"}
	sub		t $tmp5 $tmp8 	%argrw{"wrr"}
# squareSmooth2.osl:10
#     point centre=point (0.5,0.5,0);
	assign		centre $const5 	%filename{"squareSmooth2.osl"} %line{10} %argrw{"wr"}
# squareSmooth2.osl:11
#     point here=point (s,t,0);
	point		here s t $const7 	%line{11} %argrw{"wrrr"}
# squareSmooth2.osl:12
#     float dist=distance(centre,here);
	distance	dist centre here 	%line{12} %argrw{"wrr"}
# squareSmooth2.osl:13
#     float blend=0.8;
	assign		blend $const8 	%line{13} %argrw{"wr"}
# squareSmooth2.osl:14
#     float min1= 0;
	assign		min1 $const6 	%line{14} %argrw{"wr"}
# squareSmooth2.osl:15
#     float max1= 1;
	assign		max1 $const2 	%line{15} %argrw{"wr"}
# squareSmooth2.osl:16
#     float blur= 0.05;
	assign		blur $const9 	%line{16} %argrw{"wr"}
# squareSmooth2.osl:17
#     float fuzz= 0.2;
	assign		fuzz $const10 	%line{17} %argrw{"wr"}
# squareSmooth2.osl:20
#     blend=10*smoothstep(min1,min1+fuzz,s)* (1-smoothstep(max1-fuzz,max1,s))*
	add		$tmp10 min1 fuzz 	%line{20} %argrw{"wrr"}
	smoothstep	$tmp9 min1 $tmp10 s 	%argrw{"wrrr"}
	mul		$tmp11 $const12 $tmp9 	%argrw{"wrr"}
	sub		$tmp13 max1 fuzz 	%argrw{"wrr"}
	smoothstep	$tmp12 $tmp13 max1 s 	%argrw{"wrrr"}
	sub		$tmp14 $const3 $tmp12 	%argrw{"wrr"}
	mul		$tmp15 $tmp11 $tmp14 	%argrw{"wrr"}
# squareSmooth2.osl:21
#                smoothstep(min1,max1,t)* (1-smoothstep(min1,max1,t));
	smoothstep	$tmp16 min1 max1 t 	%line{21} %argrw{"wrrr"}
	mul		$tmp17 $tmp15 $tmp16 	%argrw{"wrr"}
	smoothstep	$tmp18 min1 max1 t 	%argrw{"wrrr"}
	sub		$tmp19 $const3 $tmp18 	%argrw{"wrr"}
	mul		blend $tmp17 $tmp19 	%argrw{"wrr"}
# squareSmooth2.osl:24
#     resultF=blend;
	assign		resultF blend 	%line{24} %argrw{"wr"}
	end
