OpenShadingLanguage 1.00
# Compiled by oslc 1.6.2dev
shader squareSmooth
oparam	float	resultF	0		%read{2147483647,-1} %write{36,36}
global	float	u	%read{1,1} %write{2147483647,-1}
global	float	v	%read{8,8} %write{2147483647,-1}
local	float	repeatCount	%read{1,8} %write{0,0}
local	float	s	%read{16,26} %write{7,7}
local	float	t	%read{16,33} %write{14,14}
local	point	centre	%read{17,17} %write{15,15}
local	point	here	%read{17,17} %write{16,16}
local	float	dist	%read{2147483647,-1} %write{17,17}
local	float	radius	%read{36,36} %write{18,35}
local	float	min1	%read{22,30} %write{19,19}
local	float	max1	%read{25,33} %write{20,20}
local	float	blur	%read{22,32} %write{21,21}
const	int	$const1	4		%read{0,0} %write{2147483647,-1}
temp	float	$tmp1	%read{2,2} %write{1,1}
const	float	$const2	0.029999999		%read{2,9} %write{2147483647,-1}
temp	float	$tmp2	%read{4,7} %write{2,2}
const	int	$const3	1		%read{20,20} %write{2147483647,-1}
const	float	$const4	1		%read{4,34} %write{2147483647,-1}
const	string	$const5	"mod"		%read{3,10} %write{2147483647,-1}
temp	float	$tmp3	%read{6,6} %write{5,5}
temp	float	$tmp4	%read{5,5} %write{4,4}
temp	float	$tmp5	%read{7,7} %write{6,6}
temp	float	$tmp6	%read{9,9} %write{8,8}
temp	float	$tmp7	%read{11,14} %write{9,9}
temp	float	$tmp8	%read{13,13} %write{12,12}
temp	float	$tmp9	%read{12,12} %write{11,11}
temp	float	$tmp10	%read{14,14} %write{13,13}
const	point	$const6	0.5 0.5 0		%read{15,15} %write{2147483647,-1}
const	int	$const7	0		%read{19,19} %write{2147483647,-1}
const	float	$const8	0		%read{16,16} %write{2147483647,-1}
const	float	$const9	0.1		%read{18,18} %write{2147483647,-1}
const	float	$const10	0.25		%read{21,21} %write{2147483647,-1}
const	float	$const11	1.3		%read{24,24} %write{2147483647,-1}
temp	float	$tmp11	%read{24,24} %write{23,23}
temp	float	$tmp12	%read{23,23} %write{22,22}
temp	float	$tmp13	%read{28,28} %write{24,24}
temp	float	$tmp14	%read{27,27} %write{26,26}
temp	float	$tmp15	%read{26,26} %write{25,25}
temp	float	$tmp16	%read{28,28} %write{27,27}
temp	float	$tmp17	%read{31,31} %write{28,28}
temp	float	$tmp18	%read{31,31} %write{30,30}
temp	float	$tmp19	%read{30,30} %write{29,29}
temp	float	$tmp20	%read{35,35} %write{31,31}
temp	float	$tmp21	%read{34,34} %write{33,33}
temp	float	$tmp22	%read{33,33} %write{32,32}
temp	float	$tmp23	%read{35,35} %write{34,34}
code ___main___
# squareSmooth.osl:6
#     float repeatCount=4;
	assign		repeatCount $const1 	%filename{"squareSmooth.osl"} %line{6} %argrw{"wr"}
# squareSmooth.osl:7
#     float s=mod(repeatCount*u+0.03,1);
	mul		$tmp1 repeatCount u 	%line{7} %argrw{"wrr"}
	add		$tmp2 $tmp1 $const2 	%argrw{"wrr"}
	functioncall	$const5 8 	%argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:135
# vector mod (vector a, vector b) { return a - b*floor(a/b); }
	div		$tmp4 $tmp2 $const4 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp3 $tmp4 	%argrw{"wr"}
	mul		$tmp5 $const4 $tmp3 	%argrw{"wrr"}
	sub		s $tmp2 $tmp5 	%argrw{"wrr"}
# squareSmooth.osl:8
#     float t=mod(repeatCount*v+0.03,1);
	mul		$tmp6 repeatCount v 	%filename{"squareSmooth.osl"} %line{8} %argrw{"wrr"}
	add		$tmp7 $tmp6 $const2 	%argrw{"wrr"}
	functioncall	$const5 15 	%argrw{"r"}
# /opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h:135
# point  mod (point  a, point  b) { return a - b*floor(a/b); }
	div		$tmp9 $tmp7 $const4 	%filename{"/opt/pixar/RenderManProServer-20.10/lib/osl/include/stdosl.h"} %line{135} %argrw{"wrr"}
	floor		$tmp8 $tmp9 	%argrw{"wr"}
	mul		$tmp10 $const4 $tmp8 	%argrw{"wrr"}
	sub		t $tmp7 $tmp10 	%argrw{"wrr"}
# squareSmooth.osl:10
#     point centre=point (0.5,0.5,0);
	assign		centre $const6 	%filename{"squareSmooth.osl"} %line{10} %argrw{"wr"}
# squareSmooth.osl:11
#     point here=point (s,t,0);
	point		here s t $const8 	%line{11} %argrw{"wrrr"}
# squareSmooth.osl:12
#     float dist=distance(centre,here);
	distance	dist centre here 	%line{12} %argrw{"wrr"}
# squareSmooth.osl:13
#     float radius=0.1;
	assign		radius $const9 	%line{13} %argrw{"wr"}
# squareSmooth.osl:14
#     float min1= 0;
	assign		min1 $const7 	%line{14} %argrw{"wr"}
# squareSmooth.osl:15
#     float max1= 1;
	assign		max1 $const3 	%line{15} %argrw{"wr"}
# squareSmooth.osl:16
#     float blur= 0.25;
	assign		blur $const10 	%line{16} %argrw{"wr"}
# squareSmooth.osl:19
#     radius=1.3*smoothstep(min1,min1+blur,s)* (1-smoothstep(max1-blur,max1,s))*smoothstep(min1,min1+blur,t)* (1-smoothstep(max1-blur,max1,t));
	add		$tmp12 min1 blur 	%line{19} %argrw{"wrr"}
	smoothstep	$tmp11 min1 $tmp12 s 	%argrw{"wrrr"}
	mul		$tmp13 $const11 $tmp11 	%argrw{"wrr"}
	sub		$tmp15 max1 blur 	%argrw{"wrr"}
	smoothstep	$tmp14 $tmp15 max1 s 	%argrw{"wrrr"}
	sub		$tmp16 $const4 $tmp14 	%argrw{"wrr"}
	mul		$tmp17 $tmp13 $tmp16 	%argrw{"wrr"}
	add		$tmp19 min1 blur 	%argrw{"wrr"}
	smoothstep	$tmp18 min1 $tmp19 t 	%argrw{"wrrr"}
	mul		$tmp20 $tmp17 $tmp18 	%argrw{"wrr"}
	sub		$tmp22 max1 blur 	%argrw{"wrr"}
	smoothstep	$tmp21 $tmp22 max1 t 	%argrw{"wrrr"}
	sub		$tmp23 $const4 $tmp21 	%argrw{"wrr"}
	mul		radius $tmp20 $tmp23 	%argrw{"wrr"}
# squareSmooth.osl:22
#     resultF=radius;
	assign		resultF radius 	%line{22} %argrw{"wr"}
	end
