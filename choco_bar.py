#!/usr/bin/python  
# import the python renderman library
import prman

# import the python functions
import sys,os.path,subprocess
sys.path.append('common')
from Transformation import *


# modeling a cube using patches
def Bar(width,height,depth) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#front					
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
	ri.Patch("bilinear",{'P':face})
	#top
	# Displacement
	ri.Attribute("trace",{"displacements" : [1]})
	ri.Attribute("displacementbound",{"sphere" : [1],
									"coordinatesystem":["shader"]})
	ri.Pattern("PxrOSL", "diskTx", {"string shader": "Bar/squareSmooth"
		                             })
	ri.Displacement("Bar/doDisplace",{
                                "reference float disp" : ["diskTx:resultF"],
                                "float atten" : [0.08]})
	# Adding scratches 							
	ri.Pattern("PxrBump","bumpPattern", { 
										"string filename" : "Noise/bump.tx",
                                        "float scale": 0.08})
	ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [ 0.06,0.02,0.02],
						 "float roughness" : [0.4],
						 "float specular" : [0.4],
						 "reference normal bumpNormal" : ["bumpPattern:resultN"]
                        })
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')

def Cube(width,height,depth) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#rear
	face=[-w,-h,d,-w,h,d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#front
	face=[-w,-h,-d,-w,h,-d,w,-h,-d,w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	#left
	face=[-w,-h,-d,-w,h,-d,-w,-h,d,-w,h,d]									
	ri.Patch("bilinear",{'P':face})
	#right
	face=[w,-h,-d,w,h,-d,w,-h,d,w,h,d]								
	ri.Patch("bilinear",{'P':face})
	#bottom
	face=[w,-h,d,w,-h,-d,-w,-h,d,-w,-h,-d]								
	ri.Patch("bilinear",{'P':face})
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')

# one patch
def Piece(width,height,depth) :	
	w=width/2.0
	h=height/2.0
	d=depth/2.0
	ri.ArchiveRecord(ri.COMMENT, 'Cube Generated by Cube Function')
	#top
	face=[w,h,d,w,h,-d,-w,h,d,-w,h,-d]								
	ri.Patch("bilinear",{'P':face})
	ri.ArchiveRecord(ri.COMMENT, '--End of Cube Function--')



# create an instance of the RenderMan interface
ri = prman.Ri() 

filename = "simple.rib"
# begining of the rib archive generation 
ri.Begin("__render") #filename)
# ArchiveRecord is used to add elements to the rib stream in this case comments
ri.ArchiveRecord(ri.COMMENT, 'File' +filename)
# FILENAME DISPLAY Type Output format
ri.Display("choco_bar.exr", "it", "rgba")
# Specify PAL resolution 1:1 pixel Aspect ratio
ri.Format(1280,720,1)

# setup the raytrace / integrators
ri.Hider("raytrace" ,{"int incremental" :[1], "int maxsamples":720, "int minsamples":720 })
ri.PixelVariance (0.01)
ri.Exposure(1,2.2)
ri.ShadingRate (2)
ri.Integrator ("PxrPathTracer" ,"integrator")

# now set the projection to perspective
ri.Projection(ri.PERSPECTIVE,{ri.FOV:60}) 

# ri.DepthOfField(fstop,focallength,focaldistance)
ri.DepthOfField (2.8, 0.07, 2.2)


ri.WorldBegin()


# Light
ri.AttributeBegin()
ri.Declare("areaLight" ,"string")
ri.AreaLightSource( "PxrStdEnvMapLight", {ri.HANDLEID:"areaLight", "float exposure" : [1],	
	"string rman__EnvMap" : ["Environment/kitchen.tx"]
	})
ri.TransformBegin()
lightTx=Transformation()
lightTx.setPosition(0,1,0)
lightTx.setScale(1,1,1)
ri.ConcatTransform(lightTx.getMatrix())
ri.Geometry('envsphere')
ri.TransformEnd()
ri.AttributeEnd()


#Translate the world
ri.Translate(1.2,-0.3,4.5)
ri.Rotate(-5,1,0,0)
ri.Rotate(3,0,1,0)
ri.Rotate(-5,0,0,1)


# CHOCOLATE BAR
ri.TransformBegin() 
ri.Rotate(-20,1,0,0)
ri.Rotate(-25,0,1,0)
ri.AttributeBegin()
ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [0.06,0.01,0.01], 
                        })					
Bar(1.7,0.2,3);
ri.AttributeEnd()
ri.TransformEnd()

# LITTLE CHOCOLATE_white 
ri.TransformBegin() 
ri.AttributeBegin()
ri.Attribute("trace",{"displacements" : [1]})
ri.Attribute("displacementbound",{"sphere" : [1],"coordinatesystem":["shader"]})
ri.Pattern("PxrOSL", "diskTx", {"string shader": "Bar/squareSmooth1"})
ri.Displacement("Bar/doDisplace",{"reference float disp" : ["diskTx:resultF"],
                                "float atten" : [0.3]})
ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Noise/bump.tx",
                                        "float scale": 0.08})		
ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [0.6,0.364,0.2],
						#"reference color baseColor" : ["d:resultRGB"],
						 "float roughness" : [0.2],
						 "float specular" : [0.7],
						 "reference normal bumpNormal" : ["bumpPattern:resultN"]
                        })									
ri.Translate(-2.5,-0.30,0)
ri.Rotate(-20,1,0,0)
ri.Rotate(20,0,1,0)
Piece(0.5,0.3,0.5);
ri.AttributeEnd()
ri.TransformEnd()

# LITTLE CHOCOLATE_milk 
ri.TransformBegin() 
ri.AttributeBegin()
# Displacement
ri.Attribute("trace",{"displacements" : [1]})
ri.Attribute("displacementbound",{"sphere" : [1],"coordinatesystem":["shader"]})
ri.Pattern("PxrOSL", "diskTx", {"string shader": "Bar/squareSmooth1"})
ri.Displacement("Bar/doDisplace",{"reference float disp" : ["diskTx:resultF"],
                                "float atten" : [0.3]})
ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Noise/bump.tx",
                                        "float scale": 0.08})		
ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [ 0.2,0.1,0.1],
						#"reference color baseColor" : ["d:resultRGB"],
						 "float roughness" : [0.2],
						 "float specular" : [0.7],
						 "reference normal bumpNormal" : ["bumpPattern:resultN"]
                        })									
ri.Translate(-2.7,-0.6,-0.8)
ri.Rotate(-20,1,0,0)
Piece(0.4,0.3,0.4);
ri.AttributeEnd()
ri.TransformEnd()

# LITTLE CHOCOLATE_dark 
ri.TransformBegin() 
ri.AttributeBegin()
# Displacement
ri.Attribute("trace",{"displacements" : [1]})
ri.Attribute("displacementbound",{"sphere" : [1],"coordinatesystem":["shader"]})
ri.Pattern("PxrOSL", "diskTx", {"string shader": "Bar/squareSmooth1"})
ri.Displacement("Bar/doDisplace",{"reference float disp" : ["diskTx:resultF"],
                                "float atten" : [0.3]})
ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Noise/bump.tx",
                                        "float scale": 0.07})		
ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [ 0.07,0.02,0.02],
						#"reference color baseColor" : ["d:resultRGB"],
						 "float roughness" : [0.2],
						 "float specular" : [0.7],
						 "reference normal bumpNormal" : ["bumpPattern:resultN"]
                        })
ri.Translate(-1.9,-0.58,-0.7)
ri.Rotate(-20,1,0,0)
ri.Rotate(-20,0,1,0)
Piece(0.5,0.3,0.5);
ri.AttributeEnd()
ri.TransformEnd()

# Teapot
ri.AttributeBegin()

ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Noise/bump2.tx",
                                        "float scale": 0.004})		
ri.Bxdf( "PxrDisney","bxdf", { 
                        "color baseColor" : [1,1,1],
						#"reference color baseColor" : ["d:resultRGB"],
						 #"float roughness" : [0.2],
						 #"float specular" : [0.7],
						 "float metallic" : [1],
						 "reference normal bumpNormal" : ["bumpPattern:resultN"]
                        })
ri.TransformBegin()
ri.Translate (-5,.6,2.5)
ri.Rotate (-110,1,0,0)
ri.Rotate (-2,0,0,1)
ri.Scale (0.8,0.8,0.8)
ri.Geometry ("teapot")
ri.TransformEnd()
ri.AttributeEnd()

# TABLE
ri.TransformBegin() 
ri.Translate(0,-0.22,0)
ri.Rotate(-20,1,0,0)
ri.Rotate(-25,0,1,0)
ri.AttributeBegin()

ri.Pattern("PxrOSL","myshader", { "string shader" : "Table/repeat_marble", 
                                 "color Cin"  : [0.9,0.4,0.5],
							     "string filename" : "Table/marblerose.tx",
                                })
ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Table/bump.tx",
                                     "float scale": 0.2})

ri.Bxdf( "PxrDisney","bxdf", { "reference color baseColor" : ["myshader:Cout"],
                                "float roughness" : [0],
								"float specular" : [1],
                                "reference normal bumpNormal" : ["bumpPattern:resultN"]
								})
Cube(16,0.2,16);
ri.AttributeEnd()
ri.TransformEnd()

# WALL
ri.TransformBegin() 
ri.Translate(0,2,8)
ri.Rotate(-20,1,0,0)
ri.Rotate(-25,0,1,0)
ri.Rotate(-70,1,0,0)

ri.AttributeBegin()
ri.Pattern("PxrBump","bumpPattern", { "string filename" : "Noise/wall.tx",
                                     "float scale": 0.1})

ri.Bxdf( "PxrDisney","bxdf", { "color baseColor" : [1,0.5,0.7],
                               # "float roughness" : [0],
								#"float specular" : [1],
                                "reference normal bumpNormal" : ["bumpPattern:resultN"]
								})
Cube(40,0.2,15);
ri.AttributeEnd()
ri.TransformEnd()



ri.WorldEnd()
# and finally end the rib file
ri.End()
